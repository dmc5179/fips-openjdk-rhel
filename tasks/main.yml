---
# tasks file for fips-openjdk-rhel

- name: Install required packages (RPM)
  package:
    name:
      - java-11-openjdk-devel
      - nss-tools
    state: present
#  when:
#    (ansible_distribution == 'RedHat')

- name: Enable FIPS mode
  shell: fips-mode-setup --check
  register: fips_enabled

- name: Reboot nodes to activate FIPS mode
  shell: sleep 2 && shutdown -r now "FIPS mode enabled, rebooting"
  async: 1
  poll: 0
  when: fips_enabled.stdout == 'false'

- name: Wait for nodes to finish rebooting
  local_action:
    module: wait_for
      host={{ inventory_hostname }}
      port=22
      delay=1
      timeout=900
  when: fips_enabled.stdout == 'false'

- name: Determine JRE home directory from the java properties
  shell: java -XshowSettings:properties -version | grep java.home | awk '{print $NF}'
  register: jre_home
  
- name: Determine SEC_CONF
  find:
    path: "{{ lookup('env', 'JRE_HOME') }}"
    recurse: yes
    use_regex: no
    patterns: 'java.security'
  register: sec_conf

# Make sure that OpenJDK allows system property overrides.
# Edit $SEC_CONF
# and set 'security.overridePropertiesFile=true'.
- name: Abort if java system property overrides are disabled
  lineinfile: 
    dest: "{{ sec_conf.stdout }}"
    line: "security.overridePropertiesFile=true"
  check_mode: yes
  register: presence
  failed_when: presence.changed

# WORKDIR=$(pushd $(dirname $0) &> /dev/null && pwd && popd &> /dev/null)

- name: Create password file for the NSS database
  template:
    src: password.internal.j2
    dest: /tmp/password.internal

# initialize the NSS database
- name: Clear the NSS database
  become: true
  become_user: "{{ nssdb_user }}"
  file:
    path: "/home/{{ nssdb_user }}/{{ user_nssdb }}"
    state: absent
  when: ( reset_nssdb | bool)

- name: Create the NSS database directory
  become: true
  become_user: "{{ nssdb_user }}"
  file:
    path: "{{ ansible_env.HOME }}/{{ user_nssdb }}"
    state: present

# certutil -N -d $NSSDB -f $PASSFILE
- name: Initialize db in users ~{{ nssdb_user }}/.pki/nssdb
  become: true
  become_user: '{{ nssdb_user }}'
  command: certutil -N -d sql:/home/{{ nssdb_user }}/.pki/nssdb -f /tmp/password.internal
  when: nssdb_folder_created_user.changed

- name: Add the root CA
  become: true
  become_user: '{{ nssdb_user }}'
  command: certutil -A -d $NSSDB -a -n rootca \
           -i $WORKDIR/certs/ca.cert.pem -t CT,C,C -f $PASSFILE

- name: Add the intermediate CA
  become: true
  become_user: '{{ nssdb_user }}'
  command: certutil -A -d $NSSDB -a -n subrootca \
           -i $WORKDIR/certs/intermediate.cert.pem -t CT,C,C -f $PASSFILE

- name: Import the server cert and key
  become: true
  become_user: '{{ nssdb_user }}'
  command: pk12util -i certs/server.p12 -d $NSSDB -k $PASSFILE -w $PASSFILE

- name: List all the certs and keys
  become: true
  become_user: '{{ nssdb_user }}'
  command: certutil -L -d $NSSDB -h all

- name: List all the certs and keys (cont.)
  become: true
  become_user: '{{ nssdb_user }}'
  command: certutil -K -d $NSSDB -h all -f $PASSFILE

# clean up the password file
- name: Clean up the password file
  file:
    path: WORKDIR/password.internal
    state: absent

# modify the fips.provider.1 configuration from the java.security file
- name: Check FIPS provider
  shell: grep 'fips.provider.1=' $SEC_CONF | sed 's/^\(..*SunPKCS11\)..*/\1 \${user.home}\/nss.fips.cfg/g'
  register: fips_provider

- name: Create security property override file for the local user
  template:
    src: java.security.properties.j2
    dest: $HOME/java.security.properties

# point local user NSS config to the user's NSS database
cp $(dirname $SEC_CONF)/nss.fips.cfg $HOME
ESCHOME=$(echo $HOME | sed 's/\//\\\//g')
sed -i 's/\/etc\/pki\/nssdb/'$ESCHOME'\/nssdb/g' $HOME/nss.fips.cfg

- name: Results
  debug:
    msg:
    - ''
    - "$HOME/nss.fips.cfg and $HOME/nssdb contain the"
    - "NSS FIPS configuration for Java and the NSS database, respectively."
    - ''
